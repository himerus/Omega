(function ($, Modernizr, Drupal, drupalSettings, window) {

    "use strict";

    /**
     * Reusable function to assign the appropriate min-height around various omega-centric page wrappers to ensure
     * the footer can be attached to the bottom of the screen on pages where the total height of content is less than
     * that of the viewport. 100vh++
     *
     * @param offset
     * @returns {boolean}
     */
    var omegaAdjustContainers = function (offset) {
        // The elements that should obtain "100%" height at minimum.
        var elements = [
            '.page--wrapper',
            '.page--wrapper .page',
            '.page--wrapper .page .omega-layout-wrapper',
            '.page--wrapper .page .omega-layout'
        ];
        // Combine the elements into a usable jQuery object.
        var $heightElements = $(elements.join(', '));
        // Apply a calculated value the height of the elements.
        $heightElements.css('min-height', 'calc(100vh - ' + offset + 'px)');
    }

    /**
     * Function to handle adjusting the padding when the footer grows/shrinks.
     */
    Drupal.behaviors.componentFooter = {
        attach: function (context, settings) {

            // The footer region element.
            var $footer = $('.region-group--footer');
            // The layout grouping wrapper around the particular region.
            var $wrapper = $footer.closest('.omega-layout');
            // Handle adjusting the appropriate padding for the absolutely positioned component footer.
            $(window).on('resize ready load', function () {
                // Find the actual height of the footer and its contents.
                var footerHeight = $footer.outerHeight();
                // Apply the calculated value to minimum height on the parent region group element.
                $wrapper.css('padding-bottom', footerHeight);
            });
        }
    };

    /**
     * Behavior to adjust the height of primary container elements for a footer fixed to the bottom of the screen..
     *
     * This behavior is only needed/required/used for logged in users with the Use the administration toolbar
     * permission assigned. The anonymous user who does not see the toolbar has the component footer positioned
     * entirely by the CSS defined in style/scss/components/component--footer.scss.
     *
     * Essentially, this has a zero performance impact on any standard site users and is implmented to ensure a
     * clean, working version that adapts to the toolbar in its many sizes and positions.
     *
     * @see style/scss/components/component--footer.scss
     */
    Drupal.behaviors.bodyElementAdjust = {
        attach: function (context, settings) {
            // Handle adjustments to toolbar tray visibility.
            $(document).on('drupalViewportOffsetChange.toolbar', function (event, offsets) {
                omegaAdjustContainers(offsets.top);
            });
        }
    };
})(jQuery, Modernizr, Drupal, drupalSettings, window);

(function ($, Modernizr, Drupal, drupalSettings, window) {

    "use strict";

    drupalSettings.omega.currentBreakpoints = {
        'All': true
    };

    var breakpoints;
    var breakpointMatch;

    Drupal.behaviors.omegaBreakpoint = {
        attach: function (context, settings) {
            // return if not viewing on screen
            if (!window.matchMedia('only screen').matches) {
                return;
            }
            breakpoints = drupalSettings.omega_breakpoints;
            breakpointMatch = false;

            // Handle the intial load
            $(window).on('load', function () {
                $.each(breakpoints, function () {
                    if (window.matchMedia(this.query).matches) {
                        breakpointMatch = true;
                        drupalSettings.omega.currentBreakpoints[this.name] = true;
                        $.event.trigger('breakpointAdded', {
                            name: this.name,
                            query: this.query
                        });
                    }
                    else {
                        drupalSettings.omega.currentBreakpoints[this.name] = false;
                        // don't trigger the event since it is on page load, just rely on setting it to false above.
                        //$.event.trigger('breakpointRemoved', {breakpoint: this.name, query: this.query});
                    }
                });
            });

            // handle resize events
            $(window).on('resize', function () {
                $.each(breakpoints, function () {
                    if (window.matchMedia(this.query).matches) {
                        breakpointMatch = true;
                        // if it wasn't already active
                        if (drupalSettings.omega.currentBreakpoints[this.name] != true) {
                            drupalSettings.omega.currentBreakpoints[this.name] = true;
                            $.event.trigger('breakpointAdded', {
                                name: this.name,
                                query: this.query
                            });
                        }
                    }
                    else {
                        // if it was already active
                        if (drupalSettings.omega.currentBreakpoints[this.name] == true) {
                            drupalSettings.omega.currentBreakpoints[this.name] = false;
                            $.event.trigger('breakpointRemoved', {
                                name: this.name,
                                query: this.query
                            });
                        }
                    }
                });

                // must be mobile or something shitty like IE8
                if (!breakpointMatch) {
                    breakpointMatch = false;
                    drupalSettings.omega.currentBreakpoints['all'] = true;
                }
            });
        }
    };

    // @todo - need to use some LocalStorage to keep the indicator open/closed based on last setting.
    Drupal.behaviors.indicatorToggle = {
        attach: function (context, settings) {

            $('#indicator-toggle').on('click', function () {
                if ($(this).hasClass('indicator-open')) {
                    $(this).removeClass('indicator-open').addClass('indicator-closed');
                    $('#omega-screen--indicator').animate({
                        opacity: 0.25,
                        right: '-280'
                    }, 500, function () {
                        // Animation complete.
                    });
                }
                else {
                    $(this).removeClass('indicator-closed').addClass('indicator-open');
                    $('#omega-screen--indicator').animate({
                        opacity: 1,
                        right: '0',
                        //height: "toggle"
                    }, 250, function () {
                        // Animation complete.
                    });

                }
                return false;
            });
        }
    };

    Drupal.behaviors.attachIndicatorData = {
        attach: function (context, settings) {
            // grab the wrapper element to manipulate
            var oScreen = $('#omega-screen--indicator');
            var screenWidth;
            var breakpointText;

            $(window).on('load resize', function () {
                screenWidth = $(this).width();
                var layout = drupalSettings.omega.activeLayout;
                oScreen.find('.screen-size .data').html(screenWidth + 'px');
                oScreen.find('.screen-layout .data').html(layout);
                oScreen.find('.theme-name .data').html(drupalSettings.omega.activeTheme);
            });

            // if a breakpiont has been added or removed, change the text
            $(window).on('breakpointAdded breakpointRemoved', function (e, b) {
                breakpointText = [];
                $.each(breakpoints, function () {
                    if (drupalSettings.omega.currentBreakpoints[this.name] == true) {
                        breakpointText.push(this.name);
                        var text = breakpointText.join(', ');
                        oScreen.find('.screen-query .data').html(text);
                    }
                });
            });
        }
    };

    /**
     * Toolbar methods of Backbone objects.
     */
    Drupal.omega = {

        // A hash of View instances.
        views: {},

        // A hash of Model instances.
        models: {}

    };

})(jQuery, Modernizr, Drupal, drupalSettings, window);

(function ($, Drupal, drupalSettings) {

    "use strict";

    drupalSettings.omegaAdmin = {
        // autoUpdate: true,
    };

    function hexToRGB(hex) {
        // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
        var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, function (m, r, g, b) {
            return r + r + g + g + b + b;
        });

        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    }

    function hexFromRGB(r, g, b) {
        var hex = [
            r.toString(16),
            g.toString(16),
            b.toString(16)
        ];
        $.each(hex, function (nr, val) {
            if (val.length === 1) {
                hex[nr] = "0" + val;
            }
        });
        return hex.join("").toUpperCase();
    }

    function refreshRGBSlider(elem, rgb, hex) {
        var parent = elem.closest('.form-item');
        // update the background color of the swatch to match
        parent.find(".swatch").css("background-color", "#" + hex);
        // update the rgb values as well
        parent.find(".red").slider("value", rgb.r);
        parent.find(".green").slider("value", rgb.g);
        parent.find(".blue").slider("value", rgb.b);
    }

    function refreshSwatch(e, ui) {
        var parent = $(e.target).closest('.form-item');
        var red = parent.find(".red").slider("value");
        var green = parent.find(".green").slider("value");
        var blue = parent.find(".blue").slider("value");
        var hex = hexFromRGB(red, green, blue);

        // update the background color of the swatch to match
        parent.find(".swatch").css("background-color", "#" + hex);
        // update the rgb values as well
        parent.find(".red input").val(red);
        parent.find(".green input").val(green);
        parent.find(".blue input").val(blue);
        // update the form value to match
        parent.find('input.color-slider').val(hex);
    }

    Drupal.behaviors.addFontPreview = {
        attach: function (context) {
            // font styles to use in preview.
            var fontStyleValues = {
                'georgia': 'Georgia, serif',
                'times': '"Times New Roman", Times, serif',
                'palatino': '"Palatino Linotype", "Book Antiqua", Palatino, serif',
                'arial': 'Arial, Helvetica, sans-serif',
                'helvetica': '"Helvetica Neue", Helvetica, Arial, sans-serif',
                'arialBlack': '"Arial Black", Gadget, sans-serif',
                'comicSans': '"Comic Sans MS", cursive, sans-serif',
                'impact': 'Impact, Charcoal, sans-serif',
                'lucidaSans': '"Lucida Sans Unicode", "Lucida Grande", sans-serif',
                'tahoma': 'Tahoma, Geneva, sans-serif',
                'trebuchet': '"Trebuchet MS", Helvetica, sans-serif',
                'verdana': 'Verdana, Geneva, sans-serif',
                'courier': '"Courier New", Courier, monospace',
                'lucidaConsole': '"Lucida Console", Monaco, monospace',
            };

            $('#edit-variables-fonts-defaultbodyfont').on('change keyup', function () {
                var fontVal = $(this).val();
                var fontFam = fontStyleValues[fontVal];
                $('.sample-font-content p').css('font-family', fontFam);
            });
            $('#edit-variables-fonts-defaultheaderfont').on('change keyup', function () {
                var fontVal = $(this).val();
                var fontFam = fontStyleValues[fontVal];
                $('.sample-font-content h2').css('font-family', fontFam);
            });
            // handle the same thing on page load for the preview
            $(window).on('ready', function () {
                var bodyFontVal = $('#edit-variables-fonts-defaultbodyfont').val();
                var bodyFontFam = fontStyleValues[bodyFontVal];
                var headerFontVal = $('#edit-variables-fonts-defaultheaderfont').val();
                var headerFontFam = fontStyleValues[headerFontVal];
                $('.sample-font-content p').css('font-family', bodyFontFam);
                $('.sample-font-content h2').css('font-family', headerFontFam);
            });
        }
    };

    Drupal.behaviors.addColorSliders = {
        attach: function (context) {

            var sliderElements = $('input.color-slider');
            sliderElements.each(function () {
                $(this)
                    .closest('.form-item') // find the parent form item
                    .addClass('color-slider-controller')
                    .prepend('<div class="controls"><a href="#" class="reset">reset</a></div>')
                    .append('<div class="color-slider clearfix"><div class="red rgb-slider"><input type="text" class="rgb" maxlength="3" /></div><div class="green rgb-slider"><input type="text" class="rgb" maxlength="3" /></div><div class="blue rgb-slider"><input type="text" class="rgb" maxlength="3" /></div><div class="swatch"></div>');

                //$(this).find('.red, .green, .blue');
            });


            $(".red, .green, .blue").slider({
                orientation: "horizontal",
                range: "min",
                max: 255,
                value: 0,
                slide: function (event, ui) {
                    refreshSwatch(event, ui);
                },
                change: function (event, ui) {
                    refreshSwatch(event, ui);
                },
            });

            $('.color-slider-controller .controls .reset').click(function () {

                var elem = $(this).closest('.form-item').find('input.color-slider');
                var hexValue = elem.attr('data-original-color-value');
                var rgbValues = hexToRGB(hexValue);
                refreshRGBSlider(elem, rgbValues, hexValue);
                return false;
            });

            // listen for changed to the RGB form fields to adjust the slider
            $('.red input, .green input, .blue input').on('change', function () {
                var relatedSlider = $(this).closest('.rgb-slider');
                var relatedValue = $(this).val();
                relatedSlider.slider("value", relatedValue);
            });

            // listen for changes to the HEX value
            $('input.color-slider').on('change', function () {
                var elem = $(this);
                var hexValue = elem.val();
                var rgbValues = hexToRGB(hexValue);
                refreshRGBSlider(elem, rgbValues, hexValue);
            });

            $(window).on('load', function () {
                $('input.color-slider').each(function () {
                    var elem = $(this);
                    console.log(elem);
                    var hexValue = elem.val();
                    var rgbValues = hexToRGB(hexValue);
                    refreshRGBSlider(elem, rgbValues, hexValue);
                });


            });
        }
    };


    Drupal.behaviors.watchMaxWidthValues = {
        attach: function (context) {

            $('input.row-max-width').on('change', function () {
                var newVal = $(this).val();
                var newType = $(this).closest('.details-wrapper').find('.row-max-width-type');
                var percentBox = newType.find('input[value="percent"]');
                var pixelBox = newType.find('input[value="pixel"]');
                // assume it is a pixel value and change the radio accordingly
                if (newVal > 100) {
                    pixelBox.prop("checked", true);
                    percentBox.prop("checked", false);
                }
                // assume it is a percent value and change the radio accordingly
                else {
                    percentBox.prop("checked", true);
                    pixelBox.prop("checked", false);
                }
            });

        }
    };

    Drupal.behaviors.addZindexButtons = {
        attach: function (context) {

            // Create both Send to Front & Back buttons.
            $('.region-settings > .details-wrapper').each(function () {
                $(this).prepend('<div class="region-controls clearfix"><a href="#" title="Send to Back" class="send-to-back"></a><a href="#" title="Send to Front" class="send-to-front"></a></div>');
            });

            // Click functionality for Send to Back button.
            $('.send-to-back').on('click', function () {
                var element = $(this).closest('.region-settings');
                element.css('z-index', 0);
                return false;
            });

            // Click functionality for Send to Front button.
            $('.send-to-front').on('click', function () {
                var element = $(this).closest('.region-settings');
                element.css('z-index', 1000);
                return false;
            });
        }
    };

    Drupal.behaviors.addToggleStyles = {
        attach: function (context) {

            $('a.toggle-styles-on').on('click', function () {
                var element = $(this).parents('#edit-styles');
                element.find(':checkbox:not(:disabled)').prop('checked', true);
                return false;
            });

            $('a.toggle-styles-off').on('click', function () {
                var element = $(this).parents('#edit-styles');
                element.find(':checkbox:not(:disabled)').prop('checked', false);
                return false;
            });
        }
    };

    Drupal.behaviors.alternateSelectSliders = {
        attach: function (context) {

            // SORTA WORKING SLIDER INTERFACE
            $('.width-controller, .push-controller, .prefix-controller, .suffix-controller, .pull-controller').each(function () {
                var select = $(this);
                var selectWrapper = $(this).closest('.form-item');
                var slider = $('<div class="slider clearfix"><div class="data-value"></div></div>').prependTo(selectWrapper).slider({
                    min: 1,
                    max: 13,
                    range: "min",
                    value: select[0].selectedIndex + 1,
                    create: function (event, ui) {

                        var currentValue = $(event.target).slider("value") - 1;
                        $(event.target).find('.data-value').html(currentValue);
                    },
                    slide: function (event, ui) {
                        select[0].selectedIndex = ui.value - 1;
                        var nextValue = ui.value - 1;
                        $(ui.handle).closest('.slider').find('.data-value').html(nextValue);
                    },
                    stop: function (event, ui) {
                        select.change();
                    }
                });
                selectWrapper.find('select').hide();
            });
        }
    };

    Drupal.behaviors.toggleRegionSettingDisplay = {
        attach: function (context) {

            // hide push/pull by default
            $(".region-settings .form-item[class$='-pull']").hide();
            $(".region-settings .form-item[class$='-push']").hide();

            // hide prefix/suffix by default
            $(".region-settings .form-item[class$='-prefix']").hide();
            $(".region-settings .form-item[class$='-suffix']").hide();

            // open up any push/pull items if they are alredy in use and not a value of zero.
            $(".push-controller, .pull-controller").each(function () {
                if ($(this).val() > 0) {
                    $(this).parents('.layout-breakpoint-regions').addClass('push-pull-active').find(".form-item[class$='-pull'], .form-item[class$='-push']").show();
                }
                else {
                    $(this).parents('.layout-breakpoint-regions').addClass('push-pull-inactive');
                }
            });

            // open up any prefix/suffix items if they are alredy in use and not a value of zero.
            $(".prefix-controller, .suffix-controller").each(function () {
                if ($(this).val() > 0) {
                    $(this).parents('.layout-breakpoint-regions').find(".form-item[class$='-prefix'], .form-item[class$='-suffix']").show();
                }
            });

            // push/pull toggle
            $('.push-pull-toggle').on('click', function () {
                var group = $(this).closest('.details-wrapper');
                // show/hide the send to back/send to front buttons that are only ever needed
                // if you use push pull, so that when you adjust the positioning, you can fix an
                // overlap of regions to configure the one you need to move.
                $(this).parents('.layout-breakpoint-regions').toggleClass('push-pull-active');
                //push-pull-active
                group.find(".form-item[class$='-pull'], .form-item[class$='-push']").toggle();
                return false;
            });

            // prefix/suffix toggle
            $('.prefix-suffix-toggle').on('click', function () {
                var group = $(this).closest('.details-wrapper');
                group.find(".form-item[class$='-prefix'], .form-item[class$='-suffix']").toggle();
                return false;
            });

        }
    };

    Drupal.behaviors.updateLayoutForm = {
        attach: function (context) {
            // insert the region title because the formAPI doesn't let you have a title for a container

            $('.region-settings').each(function () {
                //var regionTitle = $(this).attr('data-omega-region-title');
                //$(this).prepend('<h4>' + regionTitle + '</h4');
            });

            // adjust the push value
            $('select.push-controller').on('change', function () {
                var push = $(this).val();
                $(this).next('.slider').slider("value", this.selectedIndex + 1)
                $(this).parents('.region-settings').attr('data-omega-push', push);
            });

            // adjust the prefix value
            $('select.prefix-controller').on('change', function () {
                var prefix = $(this).val();
                $(this).next('.slider').slider("value", this.selectedIndex + 1)
                $(this).parents('.region-settings').attr('data-omega-prefix', prefix);
            });


            // adjust the width value
            $('select.width-controller').on('change', function () {
                var width = $(this).val();
                //var sliderWidth = width;
                $(this).next('.slider').slider("value", this.selectedIndex + 1)
                $(this).parents('.region-settings').attr('data-omega-width', width);
            });

            // adjust the suffix value
            $('select.suffix-controller').on('change', function () {
                var suffix = $(this).val();
                $(this).next('.slider').slider("value", this.selectedIndex + 1)
                $(this).parents('.region-settings').attr('data-omega-suffix', suffix);
            });

            // adjust the pull value
            $('select.pull-controller').on('change', function () {
                var pull = $(this).val();
                $(this).next('.slider').slider("value", this.selectedIndex + 1)
                $(this).parents('.region-settings').attr('data-omega-pull', pull);
            });
        }
    };

    Drupal.behaviors.trimLayoutForm = {
        attach: function (context) {
            // Add in a layer of protection on the form, allowing only a single $layout to be sent through the form
            // The php.ini default for max_input_vars is 1000, and Drupal core hasn't addressed the issue.
            // This will try to stay under that limit, by not submitting ALL the layouts present on the settings page
            // but will only send the portion specified by the "Select layout to edit" select option.

            $('#system-theme-settings').on('submit', function () {
                var editLayout = $('#edit-edit-this-layout .layout-select');
                // cycle each of the available layouts to edit
                editLayout.each(function () {
                    var lname = $(this).attr('value');
                    if ($(this).prop('checked')) {
                    }
                    else {
                        var lpattern = "#layout-" + lname + "-config";
                        $(lpattern).remove();
                    }

                });
                //.attr("disabled", "disabled");
                //return false;
            });
        }
    };

})(jQuery, Drupal, drupalSettings);

/**
 * @file
 * Block behaviors.
 */

(function ($, window, Drupal) {
    "use strict";

    /**
     * Move a block in the blocks table between regions via select list.
     *
     * This behavior is dependent on the tableDrag behavior, since it uses the
     * objects initialized in that behavior to update the row.
     *
     * @type {Drupal~behavior}
     *
     * @prop {Drupal~behaviorAttach} attach
     *   Attaches the tableDrag behaviour for blocks in block administration.
     */
    Drupal.behaviors.omegaRegionDrag = {
        attach: function (context, settings) {
            // tableDrag is required.
            if (typeof Drupal.tableDrag === 'undefined') {
                return;
            }

            /**
             * Function to check empty regions and toggle classes based on this.
             *
             * @param {jQuery} table
             *   The jQuery object representing the table to inspect.
             * @param {jQuery} rowObject
             *   The jQuery object representing the table row.
             */
            function omegaCheckEmptyRegions(table, rowObject) {
                table.find('tr.layout-region--message').each(function () {
                    var $this = $(this);
                    // If the dragged row is in this region, but above the message row,
                    // swap it down one space.
                    if ($this.prev('tr').get(0) === rowObject.element) {
                        // Prevent a recursion problem when using the keyboard to move rows
                        // up.
                        if ((rowObject.method !== 'keyboard' || rowObject.direction === 'down')) {
                            rowObject.swap('after', this);
                        }
                    }
                    // This region has become empty.
                    if ($this.next('tr').is(':not(.draggable)') || $this.next('tr').length === 0) {
                        $this.removeClass('layout-region--populated').addClass('layout-region--empty');
                    }
                    // This region has become populated.
                    else if ($this.is('.layout-region--empty')) {
                        $this.removeClass('layout-region--empty').addClass('layout-region--populated');
                    }
                });
            }

            /**
             * Function to update the last placed row with the correct classes.
             *
             * @param {jQuery} table
             *   The jQuery object representing the table to inspect.
             * @param {jQuery} rowObject
             *   The jQuery object representing the table row.
             */
            function omegaUpdateLastPlaced(table, rowObject) {
                // Remove the color-success class from new block if applicable.
                table.find('.color-success').removeClass('color-success');

                var $rowObject = $(rowObject);
                if (!$rowObject.is('.drag-previous')) {
                    table.find('.drag-previous').removeClass('drag-previous');
                    $rowObject.addClass('drag-previous');
                }
            }

            /**
             * Update block weights in the given region.
             *
             * @param {jQuery} table
             *   Table with draggable items.
             * @param {string} region
             *   Machine name of region containing blocks to update.
             */
            function omegaUpdateBlockWeights(table, region) {
                // Calculate minimum weight.
                var weight = -Math.round(table.find('.draggable').length / 2);
                // Update the block weights.
                table.find('.layout--' + region + '--message').nextUntil('.region-title')
                    .find('select.layout-weight').val(function () {
                    // Increment the weight before assigning it to prevent using the
                    // absolute minimum available weight. This way we always have an
                    // unused upper and lower bound, which makes manually setting the
                    // weights easier for users who prefer to do it that way.
                    return ++weight;
                });
            }

            var tables = $('[id$="theme-region-assignment"]');

            $.each(tables, function(id, table){
                // Get the blocks tableDrag object.
                table = $(this);

                //omegaCheckEmptyRegions($(table), $(table).find('tr:eq(0)'));
                var tableId = table.attr('id');
                //console.log('tableId: ' + tableId);
                //console.log('-----------------------------------');

                // Check the unassigned region.
                // Modify empty regions with added or removed fields.
                omegaCheckEmptyRegions(table, '');

                var tableDrag = Drupal.tableDrag[tableId];
                // Add a handler for when a row is swapped, update empty regions.
                tableDrag.row.prototype.onSwap = function (swappedRow) {
                    omegaCheckEmptyRegions(table, this);
                    omegaUpdateLastPlaced(table, this);
                };

                // Add a handler so when a row is dropped, update fields dropped into
                // new regions.
                tableDrag.onDrop = function () {
                    var dragObject = this;
                    var $rowElement = $(dragObject.rowObject.element);
                    // Use "region-message" row instead of "region" row because
                    // "region-{region_name}-message" is less prone to regexp match errors.
                    var regionRow = $rowElement.prevAll('tr.layout-region--message').get(0);
                    var regionName = regionRow.className.replace(/([^ ]+[ ]+)*layout-region--([^ ]+)--message([ ]+[^ ]+)*/, '$2');
                    var regionField = $rowElement.find('select.layout-region-select');
                    // Check whether the newly picked region is available for this block.
                    if (regionField.find('option[value=' + regionName + ']').length === 0) {
                        // If not, alert the user and keep the block in its old region
                        // setting.
                        window.alert(Drupal.t('The region cannot be placed in this region.'));
                        // Simulate that there was a selected element change, so the row is
                        // put back to from where the user tried to drag it.
                        regionField.trigger('change');
                    }

                    // Update region and weight fields if the region has been changed.
                    if (!regionField.is('.layout-region--' + regionName)) {
                        var weightField = $rowElement.find('select.layout-weight');
                        var oldRegionName = weightField[0].className.replace(/([^ ]+[ ]+)*layout-weight-([^ ]+)([ ]+[^ ]+)*/, '$2');
                        regionField.removeClass('layout-region--' + oldRegionName).addClass('layout-region--' + regionName);
                        weightField.removeClass('layout-weight--' + oldRegionName).addClass('layout-weight--' + regionName);
                        regionField.val(regionName);
                    }

                    omegaUpdateBlockWeights(table, regionName);
                };

                // Add the behavior to each region select list.
                $(context).find('select.layout-region-select').once('layout-region-select')
                    .on('change', function (event) {
                        // Make our new row and select field.
                        var parentTable = $(this).closest('table');
                        var row = $(this).closest('tr');
                        var select = $(this);
                        // Find the correct region and insert the row as the last in the
                        // region.
                        tableDrag.rowObject = new tableDrag.row(row[0]);
                        var region_message = parentTable.find('.layout-region--' + select[0].value + '--message');
                        var region_items = region_message.nextUntil('.layout-region--message, .layout-region--title');
                        if (region_items.length) {
                            region_items.last().after(row);
                        }
                        // We found that region_message is the last row.
                        else {
                            region_message.after(row);
                        }
                        omegaUpdateBlockWeights(parentTable, select[0].value);
                        // Modify empty regions with added or removed fields.
                        omegaCheckEmptyRegions(parentTable, tableDrag.rowObject);
                        // Update last placed block indication.
                        omegaUpdateLastPlaced(parentTable, row);
                        // Show unsaved changes warning.
                        if (!tableDrag.changed) {
                            $(Drupal.theme('tableDragChangedWarning')).insertBefore(tableDrag.parentTable).hide().fadeIn('slow');
                            tableDrag.changed = true;
                        }
                        // Remove focus from selectbox.
                        select.trigger('blur');
                    });
            })

        }
    };

})(jQuery, window, Drupal);

//# sourceMappingURL=script.min.js.map
