{"version":3,"sources":["component--footer.js","omega.js","omega_admin.js","regionAssign.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnnzfile":"script.min.js","sourcesContent":["(function ($, Modernizr, Drupal, drupalSettings, window) {\n\n    \"use strict\";\n\n    /**\n     * Reusable function to assign the appropriate min-height around various omega-centric page wrappers to ensure\n     * the footer can be attached to the bottom of the screen on pages where the total height of content is less than\n     * that of the viewport. 100vh++\n     *\n     * @param offset\n     * @returns {boolean}\n     */\n    var omegaAdjustContainers = function (offset) {\n        // The elements that should obtain \"100%\" height at minimum.\n        var elements = [\n            '.page--wrapper',\n            '.page--wrapper .page',\n            '.page--wrapper .page .omega-layout-wrapper',\n            '.page--wrapper .page .omega-layout'\n        ];\n        // Combine the elements into a usable jQuery object.\n        var $heightElements = $(elements.join(', '));\n        // Apply a calculated value the height of the elements.\n        $heightElements.css('min-height', 'calc(100vh - ' + offset + 'px)');\n    }\n\n    /**\n     * Function to handle adjusting the padding when the footer grows/shrinks.\n     */\n    Drupal.behaviors.componentFooter = {\n        attach: function (context, settings) {\n\n            // The footer region element.\n            var $footer = $('.region-group--footer');\n            // The layout grouping wrapper around the particular region.\n            var $wrapper = $footer.closest('.omega-layout');\n            // Handle adjusting the appropriate padding for the absolutely positioned component footer.\n            $(window).on('resize ready load', function () {\n                // Find the actual height of the footer and its contents.\n                var footerHeight = $footer.outerHeight();\n                // Apply the calculated value to minimum height on the parent region group element.\n                $wrapper.css('padding-bottom', footerHeight);\n            });\n        }\n    };\n\n    /**\n     * Behavior to adjust the height of primary container elements for a footer fixed to the bottom of the screen..\n     *\n     * This behavior is only needed/required/used for logged in users with the Use the administration toolbar\n     * permission assigned. The anonymous user who does not see the toolbar has the component footer positioned\n     * entirely by the CSS defined in style/scss/components/component--footer.scss.\n     *\n     * Essentially, this has a zero performance impact on any standard site users and is implmented to ensure a\n     * clean, working version that adapts to the toolbar in its many sizes and positions.\n     *\n     * @see style/scss/components/component--footer.scss\n     */\n    Drupal.behaviors.bodyElementAdjust = {\n        attach: function (context, settings) {\n            // Handle adjustments to toolbar tray visibility.\n            $(document).on('drupalViewportOffsetChange.toolbar', function (event, offsets) {\n                omegaAdjustContainers(offsets.top);\n            });\n        }\n    };\n})(jQuery, Modernizr, Drupal, drupalSettings, window);\n","(function ($, Modernizr, Drupal, drupalSettings, window) {\n\n    \"use strict\";\n\n    drupalSettings.omega.currentBreakpoints = {\n        'All': true\n    };\n\n    var breakpoints;\n    var breakpointMatch;\n\n    Drupal.behaviors.omegaBreakpoint = {\n        attach: function (context, settings) {\n            // return if not viewing on screen\n            if (!window.matchMedia('only screen').matches) {\n                return;\n            }\n            breakpoints = drupalSettings.omega_breakpoints;\n            breakpointMatch = false;\n\n            // Handle the intial load\n            $(window).on('load', function () {\n                $.each(breakpoints, function () {\n                    if (window.matchMedia(this.query).matches) {\n                        breakpointMatch = true;\n                        drupalSettings.omega.currentBreakpoints[this.name] = true;\n                        $.event.trigger('breakpointAdded', {\n                            name: this.name,\n                            query: this.query\n                        });\n                    }\n                    else {\n                        drupalSettings.omega.currentBreakpoints[this.name] = false;\n                        // don't trigger the event since it is on page load, just rely on setting it to false above.\n                        //$.event.trigger('breakpointRemoved', {breakpoint: this.name, query: this.query});\n                    }\n                });\n            });\n\n            // handle resize events\n            $(window).on('resize', function () {\n                $.each(breakpoints, function () {\n                    if (window.matchMedia(this.query).matches) {\n                        breakpointMatch = true;\n                        // if it wasn't already active\n                        if (drupalSettings.omega.currentBreakpoints[this.name] != true) {\n                            drupalSettings.omega.currentBreakpoints[this.name] = true;\n                            $.event.trigger('breakpointAdded', {\n                                name: this.name,\n                                query: this.query\n                            });\n                        }\n                    }\n                    else {\n                        // if it was already active\n                        if (drupalSettings.omega.currentBreakpoints[this.name] == true) {\n                            drupalSettings.omega.currentBreakpoints[this.name] = false;\n                            $.event.trigger('breakpointRemoved', {\n                                name: this.name,\n                                query: this.query\n                            });\n                        }\n                    }\n                });\n\n                // must be mobile or something shitty like IE8\n                if (!breakpointMatch) {\n                    breakpointMatch = false;\n                    drupalSettings.omega.currentBreakpoints['all'] = true;\n                }\n            });\n        }\n    };\n\n    // @todo - need to use some LocalStorage to keep the indicator open/closed based on last setting.\n    Drupal.behaviors.indicatorToggle = {\n        attach: function (context, settings) {\n\n            $('#indicator-toggle').on('click', function () {\n                if ($(this).hasClass('indicator-open')) {\n                    $(this).removeClass('indicator-open').addClass('indicator-closed');\n                    $('#omega-screen--indicator').animate({\n                        opacity: 0.25,\n                        right: '-280'\n                    }, 500, function () {\n                        // Animation complete.\n                    });\n                }\n                else {\n                    $(this).removeClass('indicator-closed').addClass('indicator-open');\n                    $('#omega-screen--indicator').animate({\n                        opacity: 1,\n                        right: '0',\n                        //height: \"toggle\"\n                    }, 250, function () {\n                        // Animation complete.\n                    });\n\n                }\n                return false;\n            });\n        }\n    };\n\n    Drupal.behaviors.attachIndicatorData = {\n        attach: function (context, settings) {\n            // grab the wrapper element to manipulate\n            var oScreen = $('#omega-screen--indicator');\n            var screenWidth;\n            var breakpointText;\n\n            $(window).on('load resize', function () {\n                screenWidth = $(this).width();\n                var layout = drupalSettings.omega.activeLayout;\n                oScreen.find('.screen-size .data').html(screenWidth + 'px');\n                oScreen.find('.screen-layout .data').html(layout);\n                oScreen.find('.theme-name .data').html(drupalSettings.omega.activeTheme);\n            });\n\n            // if a breakpiont has been added or removed, change the text\n            $(window).on('breakpointAdded breakpointRemoved', function (e, b) {\n                breakpointText = [];\n                $.each(breakpoints, function () {\n                    if (drupalSettings.omega.currentBreakpoints[this.name] == true) {\n                        breakpointText.push(this.name);\n                        var text = breakpointText.join(', ');\n                        oScreen.find('.screen-query .data').html(text);\n                    }\n                });\n            });\n        }\n    };\n\n    /**\n     * Toolbar methods of Backbone objects.\n     */\n    Drupal.omega = {\n\n        // A hash of View instances.\n        views: {},\n\n        // A hash of Model instances.\n        models: {}\n\n    };\n\n})(jQuery, Modernizr, Drupal, drupalSettings, window);\n","(function ($, Drupal, drupalSettings) {\n\n    \"use strict\";\n\n    drupalSettings.omegaAdmin = {\n        // autoUpdate: true,\n    };\n\n    function hexToRGB(hex) {\n        // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n        var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n            return r + r + g + g + b + b;\n        });\n\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16)\n        } : null;\n    }\n\n    function hexFromRGB(r, g, b) {\n        var hex = [\n            r.toString(16),\n            g.toString(16),\n            b.toString(16)\n        ];\n        $.each(hex, function (nr, val) {\n            if (val.length === 1) {\n                hex[nr] = \"0\" + val;\n            }\n        });\n        return hex.join(\"\").toUpperCase();\n    }\n\n    function refreshRGBSlider(elem, rgb, hex) {\n        var parent = elem.closest('.form-item');\n        // update the background color of the swatch to match\n        parent.find(\".swatch\").css(\"background-color\", \"#\" + hex);\n        // update the rgb values as well\n        parent.find(\".red\").slider(\"value\", rgb.r);\n        parent.find(\".green\").slider(\"value\", rgb.g);\n        parent.find(\".blue\").slider(\"value\", rgb.b);\n    }\n\n    function refreshSwatch(e, ui) {\n        var parent = $(e.target).closest('.form-item');\n        var red = parent.find(\".red\").slider(\"value\");\n        var green = parent.find(\".green\").slider(\"value\");\n        var blue = parent.find(\".blue\").slider(\"value\");\n        var hex = hexFromRGB(red, green, blue);\n\n        // update the background color of the swatch to match\n        parent.find(\".swatch\").css(\"background-color\", \"#\" + hex);\n        // update the rgb values as well\n        parent.find(\".red input\").val(red);\n        parent.find(\".green input\").val(green);\n        parent.find(\".blue input\").val(blue);\n        // update the form value to match\n        parent.find('input.color-slider').val(hex);\n    }\n\n    Drupal.behaviors.addFontPreview = {\n        attach: function (context) {\n            // font styles to use in preview.\n            var fontStyleValues = {\n                'georgia': 'Georgia, serif',\n                'times': '\"Times New Roman\", Times, serif',\n                'palatino': '\"Palatino Linotype\", \"Book Antiqua\", Palatino, serif',\n                'arial': 'Arial, Helvetica, sans-serif',\n                'helvetica': '\"Helvetica Neue\", Helvetica, Arial, sans-serif',\n                'arialBlack': '\"Arial Black\", Gadget, sans-serif',\n                'comicSans': '\"Comic Sans MS\", cursive, sans-serif',\n                'impact': 'Impact, Charcoal, sans-serif',\n                'lucidaSans': '\"Lucida Sans Unicode\", \"Lucida Grande\", sans-serif',\n                'tahoma': 'Tahoma, Geneva, sans-serif',\n                'trebuchet': '\"Trebuchet MS\", Helvetica, sans-serif',\n                'verdana': 'Verdana, Geneva, sans-serif',\n                'courier': '\"Courier New\", Courier, monospace',\n                'lucidaConsole': '\"Lucida Console\", Monaco, monospace',\n            };\n\n            $('#edit-variables-fonts-defaultbodyfont').on('change keyup', function () {\n                var fontVal = $(this).val();\n                var fontFam = fontStyleValues[fontVal];\n                $('.sample-font-content p').css('font-family', fontFam);\n            });\n            $('#edit-variables-fonts-defaultheaderfont').on('change keyup', function () {\n                var fontVal = $(this).val();\n                var fontFam = fontStyleValues[fontVal];\n                $('.sample-font-content h2').css('font-family', fontFam);\n            });\n            // handle the same thing on page load for the preview\n            $(window).on('ready', function () {\n                var bodyFontVal = $('#edit-variables-fonts-defaultbodyfont').val();\n                var bodyFontFam = fontStyleValues[bodyFontVal];\n                var headerFontVal = $('#edit-variables-fonts-defaultheaderfont').val();\n                var headerFontFam = fontStyleValues[headerFontVal];\n                $('.sample-font-content p').css('font-family', bodyFontFam);\n                $('.sample-font-content h2').css('font-family', headerFontFam);\n            });\n        }\n    };\n\n    Drupal.behaviors.addColorSliders = {\n        attach: function (context) {\n\n            var sliderElements = $('input.color-slider');\n            sliderElements.each(function () {\n                $(this)\n                    .closest('.form-item') // find the parent form item\n                    .addClass('color-slider-controller')\n                    .prepend('<div class=\"controls\"><a href=\"#\" class=\"reset\">reset</a></div>')\n                    .append('<div class=\"color-slider clearfix\"><div class=\"red rgb-slider\"><input type=\"text\" class=\"rgb\" maxlength=\"3\" /></div><div class=\"green rgb-slider\"><input type=\"text\" class=\"rgb\" maxlength=\"3\" /></div><div class=\"blue rgb-slider\"><input type=\"text\" class=\"rgb\" maxlength=\"3\" /></div><div class=\"swatch\"></div>');\n\n                //$(this).find('.red, .green, .blue');\n            });\n\n\n            $(\".red, .green, .blue\").slider({\n                orientation: \"horizontal\",\n                range: \"min\",\n                max: 255,\n                value: 0,\n                slide: function (event, ui) {\n                    refreshSwatch(event, ui);\n                },\n                change: function (event, ui) {\n                    refreshSwatch(event, ui);\n                },\n            });\n\n            $('.color-slider-controller .controls .reset').click(function () {\n\n                var elem = $(this).closest('.form-item').find('input.color-slider');\n                var hexValue = elem.attr('data-original-color-value');\n                var rgbValues = hexToRGB(hexValue);\n                refreshRGBSlider(elem, rgbValues, hexValue);\n                return false;\n            });\n\n            // listen for changed to the RGB form fields to adjust the slider\n            $('.red input, .green input, .blue input').on('change', function () {\n                var relatedSlider = $(this).closest('.rgb-slider');\n                var relatedValue = $(this).val();\n                relatedSlider.slider(\"value\", relatedValue);\n            });\n\n            // listen for changes to the HEX value\n            $('input.color-slider').on('change', function () {\n                var elem = $(this);\n                var hexValue = elem.val();\n                var rgbValues = hexToRGB(hexValue);\n                refreshRGBSlider(elem, rgbValues, hexValue);\n            });\n\n            $(window).on('load', function () {\n                $('input.color-slider').each(function () {\n                    var elem = $(this);\n                    console.log(elem);\n                    var hexValue = elem.val();\n                    var rgbValues = hexToRGB(hexValue);\n                    refreshRGBSlider(elem, rgbValues, hexValue);\n                });\n\n\n            });\n        }\n    };\n\n\n    Drupal.behaviors.watchMaxWidthValues = {\n        attach: function (context) {\n\n            $('input.row-max-width').on('change', function () {\n                var newVal = $(this).val();\n                var newType = $(this).closest('.details-wrapper').find('.row-max-width-type');\n                var percentBox = newType.find('input[value=\"percent\"]');\n                var pixelBox = newType.find('input[value=\"pixel\"]');\n                // assume it is a pixel value and change the radio accordingly\n                if (newVal > 100) {\n                    pixelBox.prop(\"checked\", true);\n                    percentBox.prop(\"checked\", false);\n                }\n                // assume it is a percent value and change the radio accordingly\n                else {\n                    percentBox.prop(\"checked\", true);\n                    pixelBox.prop(\"checked\", false);\n                }\n            });\n\n        }\n    };\n\n    Drupal.behaviors.addZindexButtons = {\n        attach: function (context) {\n\n            // Create both Send to Front & Back buttons.\n            $('.region-settings > .details-wrapper').each(function () {\n                $(this).prepend('<div class=\"region-controls clearfix\"><a href=\"#\" title=\"Send to Back\" class=\"send-to-back\"></a><a href=\"#\" title=\"Send to Front\" class=\"send-to-front\"></a></div>');\n            });\n\n            // Click functionality for Send to Back button.\n            $('.send-to-back').on('click', function () {\n                var element = $(this).closest('.region-settings');\n                element.css('z-index', 0);\n                return false;\n            });\n\n            // Click functionality for Send to Front button.\n            $('.send-to-front').on('click', function () {\n                var element = $(this).closest('.region-settings');\n                element.css('z-index', 1000);\n                return false;\n            });\n        }\n    };\n\n    Drupal.behaviors.addToggleStyles = {\n        attach: function (context) {\n\n            $('a.toggle-styles-on').on('click', function () {\n                var element = $(this).parents('#edit-styles');\n                element.find(':checkbox:not(:disabled)').prop('checked', true);\n                return false;\n            });\n\n            $('a.toggle-styles-off').on('click', function () {\n                var element = $(this).parents('#edit-styles');\n                element.find(':checkbox:not(:disabled)').prop('checked', false);\n                return false;\n            });\n        }\n    };\n\n    Drupal.behaviors.alternateSelectSliders = {\n        attach: function (context) {\n\n            // SORTA WORKING SLIDER INTERFACE\n            $('.width-controller, .push-controller, .prefix-controller, .suffix-controller, .pull-controller').each(function () {\n                var select = $(this);\n                var selectWrapper = $(this).closest('.form-item');\n                var slider = $('<div class=\"slider clearfix\"><div class=\"data-value\"></div></div>').prependTo(selectWrapper).slider({\n                    min: 1,\n                    max: 13,\n                    range: \"min\",\n                    value: select[0].selectedIndex + 1,\n                    create: function (event, ui) {\n\n                        var currentValue = $(event.target).slider(\"value\") - 1;\n                        $(event.target).find('.data-value').html(currentValue);\n                    },\n                    slide: function (event, ui) {\n                        select[0].selectedIndex = ui.value - 1;\n                        var nextValue = ui.value - 1;\n                        $(ui.handle).closest('.slider').find('.data-value').html(nextValue);\n                    },\n                    stop: function (event, ui) {\n                        select.change();\n                    }\n                });\n                selectWrapper.find('select').hide();\n            });\n        }\n    };\n\n    Drupal.behaviors.toggleRegionSettingDisplay = {\n        attach: function (context) {\n\n            // hide push/pull by default\n            $(\".region-settings .form-item[class$='-pull']\").hide();\n            $(\".region-settings .form-item[class$='-push']\").hide();\n\n            // hide prefix/suffix by default\n            $(\".region-settings .form-item[class$='-prefix']\").hide();\n            $(\".region-settings .form-item[class$='-suffix']\").hide();\n\n            // open up any push/pull items if they are alredy in use and not a value of zero.\n            $(\".push-controller, .pull-controller\").each(function () {\n                if ($(this).val() > 0) {\n                    $(this).parents('.layout-breakpoint-regions').addClass('push-pull-active').find(\".form-item[class$='-pull'], .form-item[class$='-push']\").show();\n                }\n                else {\n                    $(this).parents('.layout-breakpoint-regions').addClass('push-pull-inactive');\n                }\n            });\n\n            // open up any prefix/suffix items if they are alredy in use and not a value of zero.\n            $(\".prefix-controller, .suffix-controller\").each(function () {\n                if ($(this).val() > 0) {\n                    $(this).parents('.layout-breakpoint-regions').find(\".form-item[class$='-prefix'], .form-item[class$='-suffix']\").show();\n                }\n            });\n\n            // push/pull toggle\n            $('.push-pull-toggle').on('click', function () {\n                var group = $(this).closest('.details-wrapper');\n                // show/hide the send to back/send to front buttons that are only ever needed\n                // if you use push pull, so that when you adjust the positioning, you can fix an\n                // overlap of regions to configure the one you need to move.\n                $(this).parents('.layout-breakpoint-regions').toggleClass('push-pull-active');\n                //push-pull-active\n                group.find(\".form-item[class$='-pull'], .form-item[class$='-push']\").toggle();\n                return false;\n            });\n\n            // prefix/suffix toggle\n            $('.prefix-suffix-toggle').on('click', function () {\n                var group = $(this).closest('.details-wrapper');\n                group.find(\".form-item[class$='-prefix'], .form-item[class$='-suffix']\").toggle();\n                return false;\n            });\n\n        }\n    };\n\n    Drupal.behaviors.updateLayoutForm = {\n        attach: function (context) {\n            // insert the region title because the formAPI doesn't let you have a title for a container\n\n            $('.region-settings').each(function () {\n                //var regionTitle = $(this).attr('data-omega-region-title');\n                //$(this).prepend('<h4>' + regionTitle + '</h4');\n            });\n\n            // adjust the push value\n            $('select.push-controller').on('change', function () {\n                var push = $(this).val();\n                $(this).next('.slider').slider(\"value\", this.selectedIndex + 1)\n                $(this).parents('.region-settings').attr('data-omega-push', push);\n            });\n\n            // adjust the prefix value\n            $('select.prefix-controller').on('change', function () {\n                var prefix = $(this).val();\n                $(this).next('.slider').slider(\"value\", this.selectedIndex + 1)\n                $(this).parents('.region-settings').attr('data-omega-prefix', prefix);\n            });\n\n\n            // adjust the width value\n            $('select.width-controller').on('change', function () {\n                var width = $(this).val();\n                //var sliderWidth = width;\n                $(this).next('.slider').slider(\"value\", this.selectedIndex + 1)\n                $(this).parents('.region-settings').attr('data-omega-width', width);\n            });\n\n            // adjust the suffix value\n            $('select.suffix-controller').on('change', function () {\n                var suffix = $(this).val();\n                $(this).next('.slider').slider(\"value\", this.selectedIndex + 1)\n                $(this).parents('.region-settings').attr('data-omega-suffix', suffix);\n            });\n\n            // adjust the pull value\n            $('select.pull-controller').on('change', function () {\n                var pull = $(this).val();\n                $(this).next('.slider').slider(\"value\", this.selectedIndex + 1)\n                $(this).parents('.region-settings').attr('data-omega-pull', pull);\n            });\n        }\n    };\n\n    Drupal.behaviors.trimLayoutForm = {\n        attach: function (context) {\n            // Add in a layer of protection on the form, allowing only a single $layout to be sent through the form\n            // The php.ini default for max_input_vars is 1000, and Drupal core hasn't addressed the issue.\n            // This will try to stay under that limit, by not submitting ALL the layouts present on the settings page\n            // but will only send the portion specified by the \"Select layout to edit\" select option.\n\n            $('#system-theme-settings').on('submit', function () {\n                var editLayout = $('#edit-edit-this-layout .layout-select');\n                // cycle each of the available layouts to edit\n                editLayout.each(function () {\n                    var lname = $(this).attr('value');\n                    if ($(this).prop('checked')) {\n                    }\n                    else {\n                        var lpattern = \"#layout-\" + lname + \"-config\";\n                        $(lpattern).remove();\n                    }\n\n                });\n                //.attr(\"disabled\", \"disabled\");\n                //return false;\n            });\n        }\n    };\n\n})(jQuery, Drupal, drupalSettings);\n","/**\n * @file\n * Block behaviors.\n */\n\n(function ($, window, Drupal) {\n    \"use strict\";\n\n    /**\n     * Move a block in the blocks table between regions via select list.\n     *\n     * This behavior is dependent on the tableDrag behavior, since it uses the\n     * objects initialized in that behavior to update the row.\n     *\n     * @type {Drupal~behavior}\n     *\n     * @prop {Drupal~behaviorAttach} attach\n     *   Attaches the tableDrag behaviour for blocks in block administration.\n     */\n    Drupal.behaviors.omegaRegionDrag = {\n        attach: function (context, settings) {\n            // tableDrag is required.\n            if (typeof Drupal.tableDrag === 'undefined') {\n                return;\n            }\n\n            /**\n             * Function to check empty regions and toggle classes based on this.\n             *\n             * @param {jQuery} table\n             *   The jQuery object representing the table to inspect.\n             * @param {jQuery} rowObject\n             *   The jQuery object representing the table row.\n             */\n            function omegaCheckEmptyRegions(table, rowObject) {\n                table.find('tr.layout-region--message').each(function () {\n                    var $this = $(this);\n                    // If the dragged row is in this region, but above the message row,\n                    // swap it down one space.\n                    if ($this.prev('tr').get(0) === rowObject.element) {\n                        // Prevent a recursion problem when using the keyboard to move rows\n                        // up.\n                        if ((rowObject.method !== 'keyboard' || rowObject.direction === 'down')) {\n                            rowObject.swap('after', this);\n                        }\n                    }\n                    // This region has become empty.\n                    if ($this.next('tr').is(':not(.draggable)') || $this.next('tr').length === 0) {\n                        $this.removeClass('layout-region--populated').addClass('layout-region--empty');\n                    }\n                    // This region has become populated.\n                    else if ($this.is('.layout-region--empty')) {\n                        $this.removeClass('layout-region--empty').addClass('layout-region--populated');\n                    }\n                });\n            }\n\n            /**\n             * Function to update the last placed row with the correct classes.\n             *\n             * @param {jQuery} table\n             *   The jQuery object representing the table to inspect.\n             * @param {jQuery} rowObject\n             *   The jQuery object representing the table row.\n             */\n            function omegaUpdateLastPlaced(table, rowObject) {\n                // Remove the color-success class from new block if applicable.\n                table.find('.color-success').removeClass('color-success');\n\n                var $rowObject = $(rowObject);\n                if (!$rowObject.is('.drag-previous')) {\n                    table.find('.drag-previous').removeClass('drag-previous');\n                    $rowObject.addClass('drag-previous');\n                }\n            }\n\n            /**\n             * Update block weights in the given region.\n             *\n             * @param {jQuery} table\n             *   Table with draggable items.\n             * @param {string} region\n             *   Machine name of region containing blocks to update.\n             */\n            function omegaUpdateBlockWeights(table, region) {\n                // Calculate minimum weight.\n                var weight = -Math.round(table.find('.draggable').length / 2);\n                // Update the block weights.\n                table.find('.layout--' + region + '--message').nextUntil('.region-title')\n                    .find('select.layout-weight').val(function () {\n                    // Increment the weight before assigning it to prevent using the\n                    // absolute minimum available weight. This way we always have an\n                    // unused upper and lower bound, which makes manually setting the\n                    // weights easier for users who prefer to do it that way.\n                    return ++weight;\n                });\n            }\n\n            var tables = $('[id$=\"theme-region-assignment\"]');\n\n            $.each(tables, function(id, table){\n                // Get the blocks tableDrag object.\n                table = $(this);\n\n                //omegaCheckEmptyRegions($(table), $(table).find('tr:eq(0)'));\n                var tableId = table.attr('id');\n                //console.log('tableId: ' + tableId);\n                //console.log('-----------------------------------');\n\n                // Check the unassigned region.\n                // Modify empty regions with added or removed fields.\n                omegaCheckEmptyRegions(table, '');\n\n                var tableDrag = Drupal.tableDrag[tableId];\n                // Add a handler for when a row is swapped, update empty regions.\n                tableDrag.row.prototype.onSwap = function (swappedRow) {\n                    omegaCheckEmptyRegions(table, this);\n                    omegaUpdateLastPlaced(table, this);\n                };\n\n                // Add a handler so when a row is dropped, update fields dropped into\n                // new regions.\n                tableDrag.onDrop = function () {\n                    var dragObject = this;\n                    var $rowElement = $(dragObject.rowObject.element);\n                    // Use \"region-message\" row instead of \"region\" row because\n                    // \"region-{region_name}-message\" is less prone to regexp match errors.\n                    var regionRow = $rowElement.prevAll('tr.layout-region--message').get(0);\n                    var regionName = regionRow.className.replace(/([^ ]+[ ]+)*layout-region--([^ ]+)--message([ ]+[^ ]+)*/, '$2');\n                    var regionField = $rowElement.find('select.layout-region-select');\n                    // Check whether the newly picked region is available for this block.\n                    if (regionField.find('option[value=' + regionName + ']').length === 0) {\n                        // If not, alert the user and keep the block in its old region\n                        // setting.\n                        window.alert(Drupal.t('The region cannot be placed in this region.'));\n                        // Simulate that there was a selected element change, so the row is\n                        // put back to from where the user tried to drag it.\n                        regionField.trigger('change');\n                    }\n\n                    // Update region and weight fields if the region has been changed.\n                    if (!regionField.is('.layout-region--' + regionName)) {\n                        var weightField = $rowElement.find('select.layout-weight');\n                        var oldRegionName = weightField[0].className.replace(/([^ ]+[ ]+)*layout-weight-([^ ]+)([ ]+[^ ]+)*/, '$2');\n                        regionField.removeClass('layout-region--' + oldRegionName).addClass('layout-region--' + regionName);\n                        weightField.removeClass('layout-weight--' + oldRegionName).addClass('layout-weight--' + regionName);\n                        regionField.val(regionName);\n                    }\n\n                    omegaUpdateBlockWeights(table, regionName);\n                };\n\n                // Add the behavior to each region select list.\n                $(context).find('select.layout-region-select').once('layout-region-select')\n                    .on('change', function (event) {\n                        // Make our new row and select field.\n                        var parentTable = $(this).closest('table');\n                        var row = $(this).closest('tr');\n                        var select = $(this);\n                        // Find the correct region and insert the row as the last in the\n                        // region.\n                        tableDrag.rowObject = new tableDrag.row(row[0]);\n                        var region_message = parentTable.find('.layout-region--' + select[0].value + '--message');\n                        var region_items = region_message.nextUntil('.layout-region--message, .layout-region--title');\n                        if (region_items.length) {\n                            region_items.last().after(row);\n                        }\n                        // We found that region_message is the last row.\n                        else {\n                            region_message.after(row);\n                        }\n                        omegaUpdateBlockWeights(parentTable, select[0].value);\n                        // Modify empty regions with added or removed fields.\n                        omegaCheckEmptyRegions(parentTable, tableDrag.rowObject);\n                        // Update last placed block indication.\n                        omegaUpdateLastPlaced(parentTable, row);\n                        // Show unsaved changes warning.\n                        if (!tableDrag.changed) {\n                            $(Drupal.theme('tableDragChangedWarning')).insertBefore(tableDrag.parentTable).hide().fadeIn('slow');\n                            tableDrag.changed = true;\n                        }\n                        // Remove focus from selectbox.\n                        select.trigger('blur');\n                    });\n            })\n\n        }\n    };\n\n})(jQuery, window, Drupal);\n"]}